{"ast":null,"code":"var _jsxFileName = \"/home/luan/Todo-List/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useField } from '@unform/core';\nimport { Container } from './style';\n\nconst Input = ({\n  name,\n  className,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    className: className,\n    isErrored: !!error,\n    isFilled: isFilled,\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/luan/Todo-List/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","useField","Container","Input","name","className","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAEEC,SAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;AAQA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,SAAT,QAA0B,SAA1B;;AAMA,MAAMC,KAA2B,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,SAAN;AAAgB,KAAGC;AAAnB,CAAD,KAA+B;AAEjE,QAAMC,QAAQ,GAAGT,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAEa,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAmCC,IAAAA;AAAnC,MAAqDd,QAAQ,CAACG,IAAD,CAAnE;AAEA,QAAMY,gBAAgB,GAAGhB,WAAW,CAAC,MAAM;AACzCS,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMQ,eAAe,GAAGjB,WAAW,CAAC,MAAM;AAAA;;AACxCS,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACJ,QAAQ,CAACW,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACD,GAJkC,EAIhC,EAJgC,CAAnC;AAMAtB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,aAAa,CAAC;AACZX,MAAAA,IAAI,EAAEQ,SADM;AAEZQ,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEV,SADb;AAEE,IAAA,SAAS,EAAE,CAAC,CAACS,KAFf;AAGE,IAAA,QAAQ,EAAEJ,QAHZ;AAIE,IAAA,SAAS,EAAEF,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AACE,IAAA,OAAO,EAAEQ,gBADX;AAEE,IAAA,MAAM,EAAEC,eAFV;AAGE,IAAA,YAAY,EAAEJ,YAHhB;AAIE,IAAA,GAAG,EAAEN;AAJP,KAKMD,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANF,CADF;AAgBD,CAzCD;;AA2CA,eAAeH,KAAf","sourcesContent":["import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\n\nimport { useField } from '@unform/core';\nimport { Container } from './style'\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string,\n}\n\nconst Input: React.FC<InputProps> = ({name,className,...rest }) => {\n  \n  const inputRef = useRef<HTMLInputElement>(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const { fieldName, defaultValue, error,  registerField } = useField(name);\n  \n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container\n      className={className}\n      isErrored={!!error} \n      isFilled={isFilled} \n      isFocused={isFocused}\n      >\n      <input\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}      \n        {...rest}\n      />\n    </Container>    \n  )\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}